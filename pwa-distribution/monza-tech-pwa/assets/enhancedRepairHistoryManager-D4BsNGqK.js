var y=Object.defineProperty;var g=(n,t,o)=>t in n?y(n,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):n[t]=o;var u=(n,t,o)=>g(n,typeof t!="symbol"?t+"":t,o);class d{static getWorkTypeHistory(){try{const t=localStorage.getItem(this.WORK_TYPE_HISTORY_KEY);return t?JSON.parse(t):[]}catch(t){return console.error("Error loading work type history:",t),[]}}static getCarWorkTypeHistory(t){return this.getWorkTypeHistory().filter(s=>s.carVin===t)}static getWorkTypeHistoryByDateRange(t,o){const s=this.getWorkTypeHistory(),i=new Date(t),r=new Date(o);return s.filter(e=>{const a=new Date(e.timestamp);return a>=i&&a<=r})}static getWorkTypeHistoryByType(t){return this.getWorkTypeHistory().filter(s=>s.fromWorkType===t||s.toWorkType===t)}static getWorkTypeTransitions(t,o){return this.getWorkTypeHistory().filter(i=>i.fromWorkType===t&&i.toWorkType===o)}static getWorkTypeAnalytics(){const t=this.getWorkTypeHistory(),o={},s={},i={},r={};return t.forEach(e=>{var l,h;const a=`${e.fromWorkType} â†’ ${e.toWorkType}`;o[a]=(o[a]||0)+1,s[e.fromWorkType]=(s[e.fromWorkType]||0)+1,s[e.toWorkType]=(s[e.toWorkType]||0)+1,i[e.carVin]=(i[e.carVin]||0)+1,r[e.fromWorkType]||(r[e.fromWorkType]={workType:e.fromWorkType,entries:[],totalPartsCost:0,totalToolsCost:0,totalParts:0,totalTools:0,mechanics:new Set,notes:[]});const c=r[e.fromWorkType];c.entries.push(e),c.totalPartsCost+=e.totalPartsCost||0,c.totalToolsCost+=e.totalToolsCost||0,c.totalParts+=((l=e.partsUsed)==null?void 0:l.length)||0,c.totalTools+=((h=e.toolsUsed)==null?void 0:h.length)||0,e.mechanics&&e.mechanics.forEach(p=>c.mechanics.add(p)),e.notes&&c.notes.push(e.notes)}),Object.values(r).forEach(e=>{e.mechanics=Array.from(e.mechanics)}),{totalTransitions:t.length,uniqueCars:Object.keys(i).length,transitionCounts:o,workTypeCounts:s,workTypeStages:r,averageTransitionsPerCar:t.length/Object.keys(i).length}}static getWorkTypeStages(t){const o=t?this.getCarWorkTypeHistory(t):this.getWorkTypeHistory(),s={};return o.forEach(r=>{var c,l;const e=r.fromWorkType;s[e]||(s[e]={workType:e,label:this.getWorkTypeLabel(e),entries:[],totalPartsCost:0,totalToolsCost:0,totalParts:0,totalTools:0,mechanics:new Set,notes:[],workNotes:[],issueDescriptions:[]});const a=s[e];a.entries.push(r),a.totalPartsCost+=r.totalPartsCost||0,a.totalToolsCost+=r.totalToolsCost||0,a.totalParts+=((c=r.partsUsed)==null?void 0:c.length)||0,a.totalTools+=((l=r.toolsUsed)==null?void 0:l.length)||0,r.mechanics&&r.mechanics.forEach(h=>a.mechanics.add(h)),r.notes&&a.notes.push(r.notes),r.workNotes&&a.workNotes.push(r.workNotes),r.issueDescription&&a.issueDescriptions.push(r.issueDescription)}),Object.values(s).map(r=>({...r,mechanics:Array.from(r.mechanics)})).sort((r,e)=>this.getWorkTypeOrder(r.workType)-this.getWorkTypeOrder(e.workType))}static getWorkTypeLabel(t){switch(t){case"in_diagnosis":return"Diagnosis Stage";case"in_repair":return"Repair Stage";case"in_quality_check":return"Quality Check Stage";case"ready":return"Ready Stage";case"delivered":return"Delivery Stage";default:return t.replace("_"," ").toUpperCase()}}static getWorkTypeOrder(t){switch(t){case"in_diagnosis":return 1;case"in_repair":return 2;case"in_quality_check":return 3;case"ready":return 4;case"delivered":return 5;default:return 999}}static getRecentWorkTypeChanges(t=10){return this.getWorkTypeHistory().slice(0,t)}static searchWorkTypeHistory(t){const o=this.getWorkTypeHistory(),s=t.toLowerCase();return o.filter(i=>i.carModel.toLowerCase().includes(s)||i.carVin.toLowerCase().includes(s)||i.workTypeChange.toLowerCase().includes(s)||i.changedBy.toLowerCase().includes(s)||i.notes&&i.notes.toLowerCase().includes(s))}static clearWorkTypeHistory(){localStorage.removeItem(this.WORK_TYPE_HISTORY_KEY)}}u(d,"WORK_TYPE_HISTORY_KEY","workTypeHistory");class T{static saveRepairFromCompletion(t){try{const o={id:`repair_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,car_vin:t.carCode,car_model:t.carModel,client_name:t.customerName,issue_description:t.issueDescription,solution_description:t.solutionDescription,repair_steps:t.repairSteps,parts_used:t.partsUsed,tools_used:t.toolsUsed,labor_hours:t.totalLaborHours,total_cost:t.totalCost,technician_name:t.assignedMechanic,assigned_mechanic:t.assignedMechanic,repair_date:new Date().toISOString().split("T")[0],completion_date:t.completionDate,work_type:t.workType,difficulty_level:t.difficultyLevel,quality_rating:t.qualityRating,client_satisfaction:t.clientSatisfaction,warranty_period:t.warrantPeriod,follow_up_required:t.followUpRequired,follow_up_notes:t.followUpNotes,before_photos:t.beforePhotos,after_photos:t.afterPhotos,mechanic_notes:t.mechanicNotes,recommendation:t.recommendation,created_at:new Date().toISOString(),updated_at:new Date().toISOString()},s=this.getRepairHistory();return s.unshift(o),localStorage.setItem(this.REPAIR_HISTORY_KEY,JSON.stringify(s)),!0}catch(o){return console.error("Error saving repair history:",o),!1}}static getRepairHistory(){try{const t=localStorage.getItem(this.REPAIR_HISTORY_KEY);return t?JSON.parse(t):[]}catch(t){return console.error("Error loading repair history:",t),[]}}static getRepairStatistics(){const t=this.getRepairHistory(),o=t.length,s=new Set(t.map(e=>e.car_vin)).size,i=new Set(t.map(e=>e.technician_name)).size,r=t.reduce((e,a)=>e+a.parts_used.reduce((c,l)=>c+l.quantity,0),0);return{totalRepairs:o,totalCars:s,totalMechanics:i,totalParts:r}}static searchRepairHistory(t){const o=this.getRepairHistory(),s=t.toLowerCase();return o.filter(i=>i.car_vin.toLowerCase().includes(s)||i.car_model.toLowerCase().includes(s)||i.client_name.toLowerCase().includes(s)||i.technician_name.toLowerCase().includes(s))}}u(T,"REPAIR_HISTORY_KEY","enhancedRepairHistory");export{T as E,d as W};
