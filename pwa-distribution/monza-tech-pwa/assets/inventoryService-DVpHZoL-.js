var c=Object.defineProperty;var y=(s,t,r)=>t in s?c(s,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):s[t]=r;var l=(s,t,r)=>y(s,typeof t!="symbol"?t+"":t,r);class u{constructor(){l(this,"INVENTORY_KEY","inventory");l(this,"INVENTORY_HISTORY_KEY","inventoryHistory")}getInventory(){try{const t=localStorage.getItem(this.INVENTORY_KEY);return t?JSON.parse(t):[]}catch(t){return console.error("Error loading inventory:",t),[]}}saveInventory(t){try{localStorage.setItem(this.INVENTORY_KEY,JSON.stringify(t))}catch(r){console.error("Error saving inventory:",r)}}findPart(t){return this.getInventory().find(n=>n.partNumber===t||n.id===t)||null}usePart(t,r=1,n){try{const o=this.getInventory(),e=this.findPart(t);if(!e)return console.error(`Part not found: ${t}`),!1;if(e.quantity<r)return console.error(`Insufficient quantity for ${e.partName}. Available: ${e.quantity}, Requested: ${r}`),!1;const i=o.map(a=>a.id===e.id?{...a,quantity:a.quantity-r,lastUpdated:new Date().toISOString()}:a);return this.saveInventory(i),this.recordPartUsage({partNumber:e.partNumber,partName:e.partName,quantity:r,carVIN:n.carVIN,employee:n.employee,timestamp:new Date().toISOString(),type:n.type,context:n.context}),console.log(`Part used: ${e.partName} (${e.partNumber}) - Quantity: ${r}, Remaining: ${e.quantity-r}`),!0}catch(o){return console.error("Error using part:",o),!1}}returnPart(t,r=1,n){try{const o=this.getInventory(),e=this.findPart(t);if(!e)return console.error(`Part not found: ${t}`),!1;const i=o.map(a=>a.id===e.id?{...a,quantity:a.quantity+r,lastUpdated:new Date().toISOString()}:a);return this.saveInventory(i),this.recordPartUsage({partNumber:e.partNumber,partName:e.partName,quantity:r,carVIN:n.carVIN,employee:n.employee,timestamp:new Date().toISOString(),type:"return",context:n.context}),console.log(`Part refunded: ${e.partName} (${e.partNumber}) - Quantity: ${r}, New Total: ${e.quantity+r}`),!0}catch(o){return console.error("Error returning part:",o),!1}}recordPartUsage(t){try{const r=localStorage.getItem(this.INVENTORY_HISTORY_KEY),n=r?JSON.parse(r):[];n.push({id:Date.now().toString()+"-"+Math.random().toString(36).substr(2,9),...t}),localStorage.setItem(this.INVENTORY_HISTORY_KEY,JSON.stringify(n))}catch(r){console.error("Error recording part usage:",r)}}getUsageHistory(){try{const t=localStorage.getItem(this.INVENTORY_HISTORY_KEY);return t?JSON.parse(t):[]}catch(t){return console.error("Error loading usage history:",t),[]}}getInventoryStats(){const t=this.getInventory(),r=t.length,n=t.reduce((i,a)=>i+a.quantity,0),o=t.filter(i=>i.quantity<=5).length,e=t.filter(i=>i.quantity===0).length;return{totalItems:r,totalQuantity:n,lowStockItems:o,outOfStockItems:e}}initializeSampleInventory(){if(this.getInventory().length===0){const r=[{id:"1",partNumber:"BAT-001",partName:"Battery",quantity:10,category:"Electrical",location:"Warehouse A",lastUpdated:new Date().toISOString()},{id:"2",partNumber:"ALT-001",partName:"Alternator",quantity:5,category:"Electrical",location:"Warehouse A",lastUpdated:new Date().toISOString()},{id:"3",partNumber:"BRAKE-001",partName:"Brake Pads",quantity:20,category:"Brakes",location:"Warehouse B",lastUpdated:new Date().toISOString()},{id:"4",partNumber:"OIL-001",partName:"Oil Filter",quantity:15,category:"Engine",location:"Warehouse B",lastUpdated:new Date().toISOString()},{id:"5",partNumber:"SPARK-001",partName:"Spark Plugs",quantity:30,category:"Engine",location:"Warehouse C",lastUpdated:new Date().toISOString()}];this.saveInventory(r),console.log("Sample inventory initialized")}}}const g=new u;g.initializeSampleInventory();export{g as i};
