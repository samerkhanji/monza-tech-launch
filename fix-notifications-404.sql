-- Fix notifications 404 errors by ensuring the notifications system is properly set up
-- This script creates the necessary tables and views if they don't exist

-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create notification type enum if it doesn't exist
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'notification_type') THEN
    CREATE TYPE notification_type AS ENUM ('message', 'request', 'car_activity');
  END IF;
END$$;

-- Create notifications table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.notifications (
  id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id      UUID NOT NULL,                          -- who should see it
  type         notification_type NOT NULL,
  title        TEXT NOT NULL,
  body         TEXT,
  payload      JSONB,                                  -- { vin, request_id, message_id, route, ... }
  is_read      BOOLEAN DEFAULT FALSE,
  created_at   TIMESTAMPTZ DEFAULT now()
);

-- Create index if it doesn't exist
CREATE INDEX IF NOT EXISTS idx_notifications_user ON public.notifications (user_id, is_read, type, created_at DESC);

-- Create the unread counts view that's causing the 404 error
CREATE OR REPLACE VIEW public.notifications_unread_counts AS
SELECT
  user_id,
  type,
  COUNT(*)::int AS unread_count
FROM public.notifications
WHERE is_read = FALSE
GROUP BY user_id, type;

-- Enable RLS
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;

-- Create RLS policies if they don't exist
DO $$
BEGIN
  -- Check if policy exists before creating
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'notifications' 
    AND policyname = 'notifications_select'
  ) THEN
    CREATE POLICY notifications_select ON public.notifications
      FOR SELECT TO authenticated
      USING (auth.uid() = user_id);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies 
    WHERE tablename = 'notifications' 
    AND policyname = 'notifications_insert'
  ) THEN
    CREATE POLICY notifications_insert ON public.notifications
      FOR INSERT TO authenticated
      WITH CHECK (auth.uid() = user_id);
  END IF;
END$$;

-- Grant permissions
GRANT SELECT ON public.notifications_unread_counts TO authenticated;
GRANT SELECT ON public.notifications_unread_counts TO anon;

-- Add comments
COMMENT ON TABLE public.notifications IS 'Central notification system for messages, requests, and car activity';
COMMENT ON VIEW public.notifications_unread_counts IS 'Fast unread count view for notification badges';

-- Log completion
SELECT 'Notifications system setup completed successfully' as status;
