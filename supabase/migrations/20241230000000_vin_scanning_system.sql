-- ========================================
-- VIN SCANNING SYSTEM MIGRATION
-- ========================================
-- This migration implements a robust VIN scanning system
-- with proper constraints, audit logging, and security

-- ========================================
-- 1. VIN REGEX CONSTANT
-- ========================================
-- Canonical VIN regex: 17 chars, A-H J-N P R-Z 0-9 (no I,O,Q)
-- We'll embed this directly where needed: '^[A-HJ-NPR-Z0-9]{17}$'

-- ========================================
-- 2. ENSURE CAR_INVENTORY HAS SINGLE SOURCE OF TRUTH
-- ========================================

-- Add current_location column if it doesn't exist
ALTER TABLE public.car_inventory
  ADD COLUMN IF NOT EXISTS current_location TEXT,
  ADD COLUMN IF NOT EXISTS updated_at TIMESTAMPTZ DEFAULT now();

-- Create index for efficient location queries
CREATE INDEX IF NOT EXISTS idx_car_inventory_current_location
  ON public.car_inventory (current_location);

-- Create unique index on VIN if not exists
CREATE UNIQUE INDEX IF NOT EXISTS uq_car_inventory_vin 
  ON public.car_inventory (vin);

-- ========================================
-- 3. SCAN LOG TABLE FOR AUDIT + TRIGGERS
-- ========================================

CREATE TABLE IF NOT EXISTS public.scan_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  vin TEXT NOT NULL,
  scan_context TEXT NOT NULL,         -- where the scan happened (e.g. FLOOR_1, FLOOR_2, GARAGE_INVENTORY, etc.)
  scanned_by UUID,                    -- auth.user().id
  created_at TIMESTAMPTZ DEFAULT now(),
  CONSTRAINT scan_logs_vin_chk CHECK (vin ~ '^[A-HJ-NPR-Z0-9]{17}$')
);

-- Create index for efficient VIN queries in scan logs
CREATE INDEX IF NOT EXISTS idx_scan_logs_vin 
  ON public.scan_logs (vin);

-- Create index for scan context queries
CREATE INDEX IF NOT EXISTS idx_scan_logs_context 
  ON public.scan_logs (scan_context);

-- ========================================
-- 4. SECURE PARTS INVENTORY FROM VINS
-- ========================================

-- Hard block VIN-like codes in parts SKU/code fields
-- This prevents any 17-char VIN from being accidentally saved as a part

-- For inventory_parts table (if it exists)
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'inventory_parts') THEN
    ALTER TABLE public.inventory_parts
      ADD CONSTRAINT IF NOT EXISTS inventory_parts_no_vin_sku_chk
      CHECK (sku IS NULL OR sku !~ '^[A-HJ-NPR-Z0-9]{17}$');

    -- If also store a 'code' field for parts, protect it too
    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'inventory_parts' AND column_name = 'code') THEN
      ALTER TABLE public.inventory_parts
        ADD CONSTRAINT IF NOT EXISTS inventory_parts_no_vin_code_chk
        CHECK (code IS NULL OR code !~ '^[A-HJ-NPR-Z0-9]{17}$');
    END IF;
  END IF;
END $$;

-- For inventory_items table (if it exists)
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'inventory_items') THEN
    ALTER TABLE public.inventory_items
      ADD CONSTRAINT IF NOT EXISTS inventory_items_no_vin_sku_chk
      CHECK (sku IS NULL OR sku !~ '^[A-HJ-NPR-Z0-9]{17}$');

    -- If also store a 'code' field for parts, protect it too
    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name = 'inventory_items' AND column_name = 'code') THEN
      ALTER TABLE public.inventory_items
        ADD CONSTRAINT IF NOT EXISTS inventory_items_no_vin_code_chk
        CHECK (code IS NULL OR code !~ '^[A-HJ-NPR-Z0-9]{17}$');
    END IF;
  END IF;
END $$;

-- ========================================
-- 5. ENHANCED LOCATION ENUM CONSTRAINT
-- ========================================

-- Force allowed location values only - updated for the 6 main locations
ALTER TABLE public.car_inventory
  ADD CONSTRAINT IF NOT EXISTS car_inventory_location_enum_chk
  CHECK (current_location IS NULL OR current_location IN (
    'FLOOR_1','FLOOR_2','CAR_INVENTORY','GARAGE_INVENTORY','SCHEDULE','ORDERED_CARS'
  ));

-- ========================================
-- 6. ENHANCED RPC TO MOVE A CAR ON SCAN
-- ========================================

CREATE OR REPLACE FUNCTION public.move_car_on_scan(
  p_vin TEXT,
  p_scan_context TEXT
) RETURNS JSONB
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  _exists BOOLEAN;
  _old_location TEXT;
BEGIN
  -- Validate VIN format
  IF p_vin !~ '^[A-HJ-NPR-Z0-9]{17}$' THEN
    RAISE EXCEPTION 'Invalid VIN format. VIN must be exactly 17 characters, A-H J-N P R-Z 0-9 (no I, O, Q).';
  END IF;

  -- Validate scan context is one of our allowed locations
  IF p_scan_context NOT IN ('FLOOR_1','FLOOR_2','CAR_INVENTORY','GARAGE_INVENTORY','SCHEDULE','ORDERED_CARS') THEN
    RAISE EXCEPTION 'Invalid scan context. Must be one of: FLOOR_1, FLOOR_2, CAR_INVENTORY, GARAGE_INVENTORY, SCHEDULE, ORDERED_CARS';
  END IF;

  -- Check if car exists
  SELECT EXISTS(SELECT 1 FROM public.car_inventory WHERE vin = p_vin) INTO _exists;
  IF NOT _exists THEN
    RAISE EXCEPTION 'VIN % not found in car_inventory.', p_vin;
  END IF;

  -- Get current location for logging
  SELECT current_location INTO _old_location FROM public.car_inventory WHERE vin = p_vin;

  -- Update the canonical location
  UPDATE public.car_inventory
     SET current_location = p_scan_context,
         updated_at = now()
   WHERE vin = p_vin;

  -- Log the scan for audit
  INSERT INTO public.scan_logs (vin, scan_context, scanned_by)
       VALUES (p_vin, p_scan_context, auth.uid());

  RETURN jsonb_build_object(
    'ok', true,
    'vin', p_vin,
    'old_location', _old_location,
    'new_location', p_scan_context,
    'message', format('Car %s moved from %s to %s', p_vin, COALESCE(_old_location, 'Unknown'), p_scan_context)
  );
END;
$$;

-- Grant execute permission to authenticated users
GRANT EXECUTE ON FUNCTION public.move_car_on_scan(TEXT, TEXT) TO authenticated;

-- ========================================
-- 7. NEW RPC FOR MANUAL CAR MOVEMENT
-- ========================================

CREATE OR REPLACE FUNCTION public.move_car_manual(
  p_vin TEXT,
  p_target_location TEXT
) RETURNS JSONB
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  _exists BOOLEAN;
  _old_location TEXT;
BEGIN
  -- Validate VIN format
  IF p_vin !~ '^[A-HJ-NPR-Z0-9]{17}$' THEN
    RAISE EXCEPTION 'Invalid VIN format. VIN must be exactly 17 characters, A-H J-N P R-Z 0-9 (no I, O, Q).';
  END IF;

  -- Validate target location
  IF p_target_location NOT IN ('FLOOR_1','FLOOR_2','CAR_INVENTORY','GARAGE_INVENTORY','SCHEDULE','ORDERED_CARS') THEN
    RAISE EXCEPTION 'Invalid target location. Must be one of: FLOOR_1, FLOOR_2, CAR_INVENTORY, GARAGE_INVENTORY, SCHEDULE, ORDERED_CARS';
  END IF;

  -- Check if car exists
  SELECT EXISTS(SELECT 1 FROM public.car_inventory WHERE vin = p_vin) INTO _exists;
  IF NOT _exists THEN
    RAISE EXCEPTION 'VIN % not found in car_inventory.', p_vin;
  END IF;

  -- Get current location for logging
  SELECT current_location INTO _old_location FROM public.car_inventory WHERE vin = p_vin;

  -- Don't move if already at target
  IF _old_location = p_target_location THEN
    RETURN jsonb_build_object(
      'ok', true,
      'vin', p_vin,
      'old_location', _old_location,
      'new_location', p_target_location,
      'message', format('Car %s is already at %s', p_vin, p_target_location),
      'noop', true
    );
  END IF;

  -- Update the canonical location
  UPDATE public.car_inventory
     SET current_location = p_target_location,
         updated_at = now()
   WHERE vin = p_vin;

  -- Log the manual move for audit
  INSERT INTO public.scan_logs (vin, scan_context, scanned_by)
       VALUES (p_vin, 'MANUAL_MOVE_TO_' || p_target_location, auth.uid());

  RETURN jsonb_build_object(
    'ok', true,
    'vin', p_vin,
    'old_location', _old_location,
    'new_location', p_target_location,
    'message', format('Car %s manually moved from %s to %s', p_vin, COALESCE(_old_location, 'Unknown'), p_target_location)
  );
END;
$$;

-- Grant execute permission to authenticated users
GRANT EXECUTE ON FUNCTION public.move_car_manual(TEXT, TEXT) TO authenticated;

-- ========================================
-- 8. VIEWS FOR EACH LOCATION (REPLACES SEPARATE TABLES)
-- ========================================

-- Floor 1 View
CREATE OR REPLACE VIEW public.floor_1 AS
SELECT * FROM public.car_inventory WHERE current_location = 'FLOOR_1';

-- Floor 2 View
CREATE OR REPLACE VIEW public.floor_2 AS
SELECT * FROM public.car_inventory WHERE current_location = 'FLOOR_2';

-- Car Inventory View (default location)
CREATE OR REPLACE VIEW public.car_inventory_view AS
SELECT * FROM public.car_inventory WHERE current_location = 'CAR_INVENTORY' OR current_location IS NULL;

-- Garage Inventory View
CREATE OR REPLACE VIEW public.garage_inventory_view AS
SELECT * FROM public.car_inventory WHERE current_location = 'GARAGE_INVENTORY';

-- Schedule View
CREATE OR REPLACE VIEW public.schedule_view AS
SELECT * FROM public.car_inventory WHERE current_location = 'SCHEDULE';

-- Ordered Cars View
CREATE OR REPLACE VIEW public.ordered_cars_view AS
SELECT * FROM public.car_inventory WHERE current_location = 'ORDERED_CARS';

-- ========================================
-- 9. COUNT FUNCTIONS FOR EACH LOCATION
-- ========================================

CREATE OR REPLACE FUNCTION public.get_car_count_by_location(p_location TEXT)
RETURNS INTEGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  IF p_location NOT IN ('FLOOR_1','FLOOR_2','CAR_INVENTORY','GARAGE_INVENTORY','SCHEDULE','ORDERED_CARS') THEN
    RAISE EXCEPTION 'Invalid location. Must be one of: FLOOR_1, FLOOR_2, CAR_INVENTORY, GARAGE_INVENTORY, SCHEDULE, ORDERED_CARS';
  END IF;

  RETURN (
    SELECT COUNT(*)
    FROM public.car_inventory
    WHERE current_location = p_location
  );
END;
$$;

-- Grant execute permissions
GRANT EXECUTE ON FUNCTION public.get_car_count_by_location(TEXT) TO authenticated;

-- ========================================
-- 10. PARTS VIN SUSPECTS VIEW
-- ========================================

-- Spot anything that looks like a VIN in the parts tables
CREATE OR REPLACE VIEW public.parts_vin_suspects AS
SELECT 
  'inventory_parts' as table_name,
  id, 
  sku, 
  code, 
  created_at
FROM public.inventory_parts
WHERE (sku ~ '^[A-HJ-NPR-Z0-9]{17}$' OR code ~ '^[A-HJ-NPR-Z0-9]{17}$')

UNION ALL

SELECT 
  'inventory_items' as table_name,
  id, 
  sku, 
  code, 
  created_at
FROM public.inventory_items
WHERE (sku ~ '^[A-HJ-NPR-Z0-9]{17}$' OR code ~ '^[A-HJ-NPR-Z0-9]{17}$');

-- ========================================
-- 11. ROW LEVEL SECURITY (RLS)
-- ========================================

-- Enable RLS on tables
ALTER TABLE public.car_inventory ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.scan_logs ENABLE ROW LEVEL SECURITY;

-- Read policies (allow all authenticated users to read)
CREATE POLICY IF NOT EXISTS car_inventory_read ON public.car_inventory
  FOR SELECT USING (true);

CREATE POLICY IF NOT EXISTS scan_logs_read ON public.scan_logs
  FOR SELECT USING (true);

-- Update policies (allow authenticated users to update via RPC)
CREATE POLICY IF NOT EXISTS car_inventory_update_via_rpc ON public.car_inventory
  FOR UPDATE TO authenticated
  USING (true)
  WITH CHECK (true);

-- Insert policies for scan logs
CREATE POLICY IF NOT EXISTS scan_logs_insert ON public.scan_logs
  FOR INSERT TO authenticated
  WITH CHECK (true);

-- ========================================
-- 12. HELPER FUNCTIONS
-- ========================================

-- Function to get car location
CREATE OR REPLACE FUNCTION public.get_car_location(p_vin TEXT)
RETURNS TEXT
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  IF p_vin !~ '^[A-HJ-NPR-Z0-9]{17}$' THEN
    RAISE EXCEPTION 'Invalid VIN format.';
  END IF;

  RETURN (
    SELECT current_location 
    FROM public.car_inventory 
    WHERE vin = p_vin
  );
END;
$$;

-- Function to get cars by location
CREATE OR REPLACE FUNCTION public.get_cars_by_location(p_location TEXT)
RETURNS TABLE(
  vin TEXT,
  model TEXT,
  brand TEXT,
  year INTEGER,
  color TEXT,
  current_location TEXT,
  updated_at TIMESTAMPTZ
)
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  IF p_location NOT IN ('FLOOR_1','FLOOR_2','CAR_INVENTORY','GARAGE_INVENTORY','SCHEDULE','ORDERED_CARS') THEN
    RAISE EXCEPTION 'Invalid location. Must be one of: FLOOR_1, FLOOR_2, CAR_INVENTORY, GARAGE_INVENTORY, SCHEDULE, ORDERED_CARS';
  END IF;

  RETURN QUERY
  SELECT 
    ci.vin,
    ci.model,
    ci.brand,
    ci.year,
    ci.color,
    ci.current_location,
    ci.updated_at
  FROM public.car_inventory ci
  WHERE ci.current_location = p_location
  ORDER BY ci.updated_at DESC;
END;
$$;

-- Function to get all available move options (excluding current location)
CREATE OR REPLACE FUNCTION public.get_available_move_locations(p_current_location TEXT)
RETURNS TEXT[]
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  IF p_current_location NOT IN ('FLOOR_1','FLOOR_2','CAR_INVENTORY','GARAGE_INVENTORY','SCHEDULE','ORDERED_CARS') THEN
    RAISE EXCEPTION 'Invalid current location. Must be one of: FLOOR_1, FLOOR_2, CAR_INVENTORY, GARAGE_INVENTORY, SCHEDULE, ORDERED_CARS';
  END IF;

  RETURN ARRAY['FLOOR_1','FLOOR_2','CAR_INVENTORY','GARAGE_INVENTORY','SCHEDULE','ORDERED_CARS']::TEXT[] - p_current_location;
END;
$$;

-- Grant execute permissions
GRANT EXECUTE ON FUNCTION public.get_car_location(TEXT) TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_cars_by_location(TEXT) TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_available_move_locations(TEXT) TO authenticated;

-- ========================================
-- 13. MIGRATION COMPLETION
-- ========================================

-- Log successful migration
DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'audit_logs') THEN
    INSERT INTO public.audit_logs (action, table_name, details, user_id)
    VALUES (
      'MIGRATION_COMPLETED',
      'VIN_SCANNING_SYSTEM',
      'Enhanced VIN scanning system migration completed successfully with location management',
      auth.uid()
    );
  END IF;
END $$;

-- Return success message
SELECT 'Enhanced VIN Scanning System Migration Completed Successfully!' as status;
