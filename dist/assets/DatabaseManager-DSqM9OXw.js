var t=Object.defineProperty,e=Object.defineProperties,r=Object.getOwnPropertyDescriptors,n=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,c=(e,r,n)=>r in e?t(e,r,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[r]=n,u=(t,e,r)=>new Promise((n,a)=>{var o=t=>{try{u(r.next(t))}catch(e){a(e)}},c=t=>{try{u(r.throw(t))}catch(e){a(e)}},u=t=>t.done?n(t.value):Promise.resolve(t.value).then(o,c);u((r=r.apply(t,e)).next())});import{Floor1Table as l}from"./Floor1Table-CJw2rxss.js";import{Floor2Table as i}from"./Floor2Table-BV_QDsVu.js";import{CarInventoryTable as d}from"./CarInventoryTable-DhKHS77Q.js";import{s}from"./index-BmUpYGrm.js";import"./vendor-vN6PtkFd.js";import"./charts-XrXYWaKo.js";import"./utils-DhcIvS4g.js";class h{static getAllScheduledCars(){return u(this,null,function*(){try{const{data:t,error:e}=yield s.from("garage_schedule").select("*").order("scheduled_date",{ascending:!0});if(e)throw e;return t||[]}catch(t){return[]}})}static getScheduledCarCount(){return u(this,null,function*(){try{const{count:t,error:e}=yield s.from("garage_schedule").select("*",{count:"exact",head:!0});return e?0:t||0}catch(t){return 0}})}static addCarToSchedule(t,e){return u(this,null,function*(){try{const r={car_id:t.id,vin:t.vinNumber||t.vin,model:t.model,year:t.year,color:t.color,brand:t.brand,vehicle_type:t.category||t.vehicle_type,status:"scheduled",scheduled_date:(new Date).toISOString().split("T")[0],scheduled_time:(new Date).toLocaleTimeString(),service_type:"PDI Check",technician:"",notes:e||`Added to garage schedule on ${(new Date).toLocaleDateString()}`,priority:"medium",estimated_duration:120,completion_status:"pending",created_at:(new Date).toISOString(),updated_at:(new Date).toISOString()},{error:n}=yield s.from("garage_schedule").insert([r]);return!n}catch(r){return!1}})}static removeCarFromSchedule(t){return u(this,null,function*(){try{const{error:e}=yield s.from("garage_schedule").delete().eq("id",t);return!e}catch(e){return!1}})}static updateScheduleItem(t,l){return u(this,null,function*(){try{const{error:d}=yield s.from("garage_schedule").update((u=((t,e)=>{for(var r in e||(e={}))a.call(e,r)&&c(t,r,e[r]);if(n)for(var r of n(e))o.call(e,r)&&c(t,r,e[r]);return t})({},l),i={updated_at:(new Date).toISOString()},e(u,r(i)))).eq("id",t);return!d}catch(d){return!1}var u,i})}static getScheduleForDate(t){return u(this,null,function*(){try{const{data:e,error:r}=yield s.from("garage_schedule").select("*").eq("scheduled_date",t).order("scheduled_time",{ascending:!0});return r?[]:e||[]}catch(e){return[]}})}static clearAllScheduledCars(){return u(this,null,function*(){try{const{error:t}=yield s.from("garage_schedule").delete().neq("id","00000000-0000-0000-0000-000000000000");return!t}catch(t){return!1}})}}class y{static getAllOrderedCars(){return u(this,null,function*(){try{const{data:t,error:e}=yield s.from("ordered_cars").select("*").order("order_date",{ascending:!1});if(e)throw e;return t||[]}catch(t){return[]}})}static getOrderedCarCount(){return u(this,null,function*(){try{const{count:t,error:e}=yield s.from("ordered_cars").select("*",{count:"exact",head:!0});return e?0:t||0}catch(t){return 0}})}static addCarOrder(t,e){return u(this,null,function*(){try{const r={vin:t.vinNumber||t.vin,model:t.model,year:t.year,color:t.color,brand:t.brand,vehicle_type:t.category||t.vehicle_type,selling_price:t.price||t.selling_price,status:"ordered",order_date:(new Date).toISOString().split("T")[0],expected_delivery:new Date(Date.now()+2592e6).toISOString().split("T")[0],customer_name:e.name||"",customer_email:e.email||"",customer_phone:e.phone||"",sales_person:e.salesPerson||"",deposit_amount:e.deposit||0,total_amount:t.price||t.selling_price,payment_status:"pending",order_notes:e.notes||`Order placed on ${(new Date).toLocaleDateString()}`,created_at:(new Date).toISOString(),updated_at:(new Date).toISOString()},{error:n}=yield s.from("ordered_cars").insert([r]);return!n}catch(r){return!1}})}static updateOrderStatus(t,e,r){return u(this,null,function*(){try{const{error:n}=yield s.from("ordered_cars").update({status:e,order_notes:r||`Status updated to ${e} on ${(new Date).toLocaleDateString()}`,updated_at:(new Date).toISOString()}).eq("id",t);return!n}catch(n){return!1}})}static getOrdersByStatus(t){return u(this,null,function*(){try{const{data:e,error:r}=yield s.from("ordered_cars").select("*").eq("status",t).order("order_date",{ascending:!1});return r?[]:e||[]}catch(e){return[]}})}static searchOrders(t){return u(this,null,function*(){try{const{data:e,error:r}=yield s.from("ordered_cars").select("*").or(`model.ilike.%${t}%,vin.ilike.%${t}%,customer_name.ilike.%${t}%`).order("order_date",{ascending:!1});return r?[]:e||[]}catch(e){return[]}})}static deleteOrder(t){return u(this,null,function*(){try{const{error:e}=yield s.from("ordered_cars").delete().eq("id",t);return!e}catch(e){return!1}})}}class g{static getAllCars(){return u(this,null,function*(){try{const{data:t,error:e}=yield s.from("car_inventory").select("*").eq("current_floor","GARAGE");if(e)throw e;return t||[]}catch(t){return[]}})}static getCarCount(){return u(this,null,function*(){try{const{count:t,error:e}=yield s.from("car_inventory").select("*",{count:"exact",head:!0}).eq("current_floor","GARAGE");return e?0:t||0}catch(t){return 0}})}static addCar(t,e){return u(this,null,function*(){try{const{error:r}=yield s.from("car_inventory").update({current_floor:"GARAGE",notes:e||`Moved to Garage on ${(new Date).toLocaleDateString()}`,updated_at:(new Date).toISOString()}).eq("id",t);return!r}catch(r){return!1}})}static removeCar(t){return u(this,null,function*(){try{const{error:e}=yield s.from("car_inventory").update({current_floor:"INVENTORY",notes:`Removed from Garage on ${(new Date).toLocaleDateString()}`,updated_at:(new Date).toISOString()}).eq("id",t);return!e}catch(e){return!1}})}static getCarsByServiceStatus(t){return u(this,null,function*(){try{const{data:e,error:r}=yield s.from("car_inventory").select("*").eq("current_floor","GARAGE").eq("status",t);return r?[]:e||[]}catch(e){return[]}})}static updateServiceStatus(t,e,r){return u(this,null,function*(){try{const{error:n}=yield s.from("car_inventory").update({status:e,notes:r||`Service status updated to ${e} on ${(new Date).toLocaleDateString()}`,updated_at:(new Date).toISOString()}).eq("id",t);return!n}catch(n){return!1}})}static getCarsNeedingPDI(){return u(this,null,function*(){try{const{data:t,error:e}=yield s.from("car_inventory").select("*").eq("current_floor","GARAGE").eq("pdi_completed",!1);return e?[]:t||[]}catch(t){return[]}})}static markPDICompleted(t,e,r){return u(this,null,function*(){try{const{error:n}=yield s.from("car_inventory").update({pdi_completed:!0,pdi_technician:e,pdi_date:(new Date).toISOString(),pdi_notes:r||`PDI completed by ${(new Date).toLocaleDateString()}`,updated_at:(new Date).toISOString()}).eq("id",t);return!n}catch(n){return!1}})}static clearAllCars(){return u(this,null,function*(){try{const{error:t}=yield s.from("car_inventory").update({current_floor:"INVENTORY",notes:`Cleared from Garage on ${(new Date).toLocaleDateString()}`,updated_at:(new Date).toISOString()}).eq("current_floor","GARAGE");return!t}catch(t){return!1}})}}class f{static getFloor1Cars(){return u(this,null,function*(){return yield l.getAllCars()})}static getFloor1Count(){return u(this,null,function*(){return yield l.getCarCount()})}static addCarToFloor1(t,e){return u(this,null,function*(){return yield l.addCar(t,e)})}static getFloor2Cars(){return u(this,null,function*(){return yield i.getAllCars()})}static getFloor2Count(){return u(this,null,function*(){return yield i.getCarCount()})}static addCarToFloor2(t,e){return u(this,null,function*(){return yield i.addCar(t,e)})}static getInventoryCars(){return u(this,null,function*(){return yield d.getAllCars()})}static getInventoryCount(){return u(this,null,function*(){return yield d.getCarCount()})}static getTotalCarCount(){return u(this,null,function*(){return yield d.getTotalCarCount()})}static getScheduledCars(){return u(this,null,function*(){return yield h.getAllScheduledCars()})}static getScheduledCount(){return u(this,null,function*(){return yield h.getScheduledCarCount()})}static addCarToSchedule(t,e){return u(this,null,function*(){return yield h.addCarToSchedule(t,e)})}static getGarageCars(){return u(this,null,function*(){return yield g.getAllCars()})}static getGarageCount(){return u(this,null,function*(){return yield g.getCarCount()})}static addCarToGarage(t,e){return u(this,null,function*(){return yield g.addCar(t,e)})}static getOrderedCars(){return u(this,null,function*(){return yield y.getAllOrderedCars()})}static getOrderedCount(){return u(this,null,function*(){return yield y.getOrderedCarCount()})}static moveCar(t,e,r){return u(this,null,function*(){try{let n=!1;switch(e){case"floor1":n=yield l.addCar(t,r);break;case"floor2":n=yield i.addCar(t,r);break;case"garage":n=yield g.addCar(t,r);break;case"garage-schedule":if(n=yield g.addCar(t,r),n){const e=yield d.getCarById(t);e&&(n=yield h.addCarToSchedule(e,r))}break;default:return!1}return n}catch(n){return!1}})}static getAllCounts(){return u(this,null,function*(){try{const[t,e,r,n,a,o]=yield Promise.all([d.getCarCount(),l.getCarCount(),i.getCarCount(),g.getCarCount(),h.getScheduledCarCount(),y.getOrderedCarCount()]);return{inventory:t,floor1:e,floor2:r,garage:n,scheduled:a,ordered:o}}catch(t){return{inventory:0,floor1:0,floor2:0,garage:0,scheduled:0,ordered:0}}})}static clearAllLocations(){return u(this,null,function*(){try{return(yield Promise.all([l.clearAllCars(),i.clearAllCars(),g.clearAllCars(),h.clearAllScheduledCars()])).every(t=>!0===t)}catch(t){return!1}})}}export{f as DatabaseManager};
