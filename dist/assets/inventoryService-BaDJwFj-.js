var t=Object.defineProperty,e=Object.defineProperties,r=Object.getOwnPropertyDescriptors,a=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,i=(e,r,a)=>r in e?t(e,r,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[r]=a,s=(t,e)=>{for(var r in e||(e={}))n.call(e,r)&&i(t,r,e[r]);if(a)for(var r of a(e))o.call(e,r)&&i(t,r,e[r]);return t},c=(t,a)=>e(t,r(a)),y=(t,e,r)=>i(t,"symbol"!=typeof e?e+"":e,r);const l=new class{constructor(){y(this,"INVENTORY_KEY","inventory"),y(this,"INVENTORY_HISTORY_KEY","inventoryHistory")}getInventory(){try{const t=localStorage.getItem(this.INVENTORY_KEY);return t?JSON.parse(t):[]}catch(t){return[]}}saveInventory(t){try{localStorage.setItem(this.INVENTORY_KEY,JSON.stringify(t))}catch(e){}}findPart(t){return this.getInventory().find(e=>e.partNumber===t||e.id===t)||null}usePart(t,e=1,r){try{const a=this.getInventory(),n=this.findPart(t);if(!n)return!1;if(n.quantity<e)return!1;const o=a.map(t=>t.id===n.id?c(s({},t),{quantity:t.quantity-e,lastUpdated:(new Date).toISOString()}):t);return this.saveInventory(o),this.recordPartUsage({partNumber:n.partNumber,partName:n.partName,quantity:e,carVIN:r.carVIN,employee:r.employee,timestamp:(new Date).toISOString(),type:r.type,context:r.context}),!0}catch(a){return!1}}returnPart(t,e=1,r){try{const a=this.getInventory(),n=this.findPart(t);if(!n)return!1;const o=a.map(t=>t.id===n.id?c(s({},t),{quantity:t.quantity+e,lastUpdated:(new Date).toISOString()}):t);return this.saveInventory(o),this.recordPartUsage({partNumber:n.partNumber,partName:n.partName,quantity:e,carVIN:r.carVIN,employee:r.employee,timestamp:(new Date).toISOString(),type:"return",context:r.context}),!0}catch(a){return!1}}recordPartUsage(t){try{const e=localStorage.getItem(this.INVENTORY_HISTORY_KEY),r=e?JSON.parse(e):[];r.push(s({id:Date.now().toString()+"-"+Math.random().toString(36).substr(2,9)},t)),localStorage.setItem(this.INVENTORY_HISTORY_KEY,JSON.stringify(r))}catch(e){}}getUsageHistory(){try{const t=localStorage.getItem(this.INVENTORY_HISTORY_KEY);return t?JSON.parse(t):[]}catch(t){return[]}}getInventoryStats(){const t=this.getInventory();return{totalItems:t.length,totalQuantity:t.reduce((t,e)=>t+e.quantity,0),lowStockItems:t.filter(t=>t.quantity<=5).length,outOfStockItems:t.filter(t=>0===t.quantity).length}}initializeSampleInventory(){if(0===this.getInventory().length){const t=[{id:"1",partNumber:"BAT-001",partName:"Battery",quantity:10,category:"Electrical",location:"Warehouse A",lastUpdated:(new Date).toISOString()},{id:"2",partNumber:"ALT-001",partName:"Alternator",quantity:5,category:"Electrical",location:"Warehouse A",lastUpdated:(new Date).toISOString()},{id:"3",partNumber:"BRAKE-001",partName:"Brake Pads",quantity:20,category:"Brakes",location:"Warehouse B",lastUpdated:(new Date).toISOString()},{id:"4",partNumber:"OIL-001",partName:"Oil Filter",quantity:15,category:"Engine",location:"Warehouse B",lastUpdated:(new Date).toISOString()},{id:"5",partNumber:"SPARK-001",partName:"Spark Plugs",quantity:30,category:"Engine",location:"Warehouse C",lastUpdated:(new Date).toISOString()}];this.saveInventory(t)}}};l.initializeSampleInventory();export{l as i};
