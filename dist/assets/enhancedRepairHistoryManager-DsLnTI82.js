var t=Object.defineProperty,e=Object.defineProperties,r=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable,i=(e,r,o)=>r in e?t(e,r,{enumerable:!0,configurable:!0,writable:!0,value:o}):e[r]=o,n=(t,e,r)=>i(t,"symbol"!=typeof e?e+"":e,r);class c{static getWorkTypeHistory(){try{const t=localStorage.getItem(this.WORK_TYPE_HISTORY_KEY);return t?JSON.parse(t):[]}catch(t){return[]}}static getCarWorkTypeHistory(t){return this.getWorkTypeHistory().filter(e=>e.carVin===t)}static getWorkTypeHistoryByDateRange(t,e){const r=this.getWorkTypeHistory(),o=new Date(t),s=new Date(e);return r.filter(t=>{const e=new Date(t.timestamp);return e>=o&&e<=s})}static getWorkTypeHistoryByType(t){return this.getWorkTypeHistory().filter(e=>e.fromWorkType===t||e.toWorkType===t)}static getWorkTypeTransitions(t,e){return this.getWorkTypeHistory().filter(r=>r.fromWorkType===t&&r.toWorkType===e)}static getWorkTypeAnalytics(){const t=this.getWorkTypeHistory(),e={},r={},o={},s={};return t.forEach(t=>{var a,i;const n=`${t.fromWorkType} â†’ ${t.toWorkType}`;e[n]=(e[n]||0)+1,r[t.fromWorkType]=(r[t.fromWorkType]||0)+1,r[t.toWorkType]=(r[t.toWorkType]||0)+1,o[t.carVin]=(o[t.carVin]||0)+1,s[t.fromWorkType]||(s[t.fromWorkType]={workType:t.fromWorkType,entries:[],totalPartsCost:0,totalToolsCost:0,totalParts:0,totalTools:0,mechanics:new Set,notes:[]});const c=s[t.fromWorkType];c.entries.push(t),c.totalPartsCost+=t.totalPartsCost||0,c.totalToolsCost+=t.totalToolsCost||0,c.totalParts+=(null==(a=t.partsUsed)?void 0:a.length)||0,c.totalTools+=(null==(i=t.toolsUsed)?void 0:i.length)||0,t.mechanics&&t.mechanics.forEach(t=>c.mechanics.add(t)),t.notes&&c.notes.push(t.notes)}),Object.values(s).forEach(t=>{t.mechanics=Array.from(t.mechanics)}),{totalTransitions:t.length,uniqueCars:Object.keys(o).length,transitionCounts:e,workTypeCounts:r,workTypeStages:s,averageTransitionsPerCar:t.length/Object.keys(o).length}}static getWorkTypeStages(t){const n=t?this.getCarWorkTypeHistory(t):this.getWorkTypeHistory(),c={};n.forEach(t=>{var e,r;const o=t.fromWorkType;c[o]||(c[o]={workType:o,label:this.getWorkTypeLabel(o),entries:[],totalPartsCost:0,totalToolsCost:0,totalParts:0,totalTools:0,mechanics:new Set,notes:[],workNotes:[],issueDescriptions:[]});const s=c[o];s.entries.push(t),s.totalPartsCost+=t.totalPartsCost||0,s.totalToolsCost+=t.totalToolsCost||0,s.totalParts+=(null==(e=t.partsUsed)?void 0:e.length)||0,s.totalTools+=(null==(r=t.toolsUsed)?void 0:r.length)||0,t.mechanics&&t.mechanics.forEach(t=>s.mechanics.add(t)),t.notes&&s.notes.push(t.notes),t.workNotes&&s.workNotes.push(t.workNotes),t.issueDescription&&s.issueDescriptions.push(t.issueDescription)});return Object.values(c).map(t=>{return n=((t,e)=>{for(var r in e||(e={}))s.call(e,r)&&i(t,r,e[r]);if(o)for(var r of o(e))a.call(e,r)&&i(t,r,e[r]);return t})({},t),c={mechanics:Array.from(t.mechanics)},e(n,r(c));var n,c}).sort((t,e)=>this.getWorkTypeOrder(t.workType)-this.getWorkTypeOrder(e.workType))}static getWorkTypeLabel(t){switch(t){case"in_diagnosis":return"Diagnosis Stage";case"in_repair":return"Repair Stage";case"in_quality_check":return"Quality Check Stage";case"ready":return"Ready Stage";case"delivered":return"Delivery Stage";default:return t.replace("_"," ").toUpperCase()}}static getWorkTypeOrder(t){switch(t){case"in_diagnosis":return 1;case"in_repair":return 2;case"in_quality_check":return 3;case"ready":return 4;case"delivered":return 5;default:return 999}}static getRecentWorkTypeChanges(t=10){return this.getWorkTypeHistory().slice(0,t)}static searchWorkTypeHistory(t){const e=this.getWorkTypeHistory(),r=t.toLowerCase();return e.filter(t=>t.carModel.toLowerCase().includes(r)||t.carVin.toLowerCase().includes(r)||t.workTypeChange.toLowerCase().includes(r)||t.changedBy.toLowerCase().includes(r)||t.notes&&t.notes.toLowerCase().includes(r))}static clearWorkTypeHistory(){localStorage.removeItem(this.WORK_TYPE_HISTORY_KEY)}}n(c,"WORK_TYPE_HISTORY_KEY","workTypeHistory");class l{static saveRepairFromCompletion(t){try{const e={id:`repair_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,car_vin:t.carCode,car_model:t.carModel,client_name:t.customerName,issue_description:t.issueDescription,solution_description:t.solutionDescription,repair_steps:t.repairSteps,parts_used:t.partsUsed,tools_used:t.toolsUsed,labor_hours:t.totalLaborHours,total_cost:t.totalCost,technician_name:t.assignedMechanic,assigned_mechanic:t.assignedMechanic,repair_date:(new Date).toISOString().split("T")[0],completion_date:t.completionDate,work_type:t.workType,difficulty_level:t.difficultyLevel,quality_rating:t.qualityRating,client_satisfaction:t.clientSatisfaction,warranty_period:t.warrantPeriod,follow_up_required:t.followUpRequired,follow_up_notes:t.followUpNotes,before_photos:t.beforePhotos,after_photos:t.afterPhotos,mechanic_notes:t.mechanicNotes,recommendation:t.recommendation,created_at:(new Date).toISOString(),updated_at:(new Date).toISOString()},r=this.getRepairHistory();return r.unshift(e),localStorage.setItem(this.REPAIR_HISTORY_KEY,JSON.stringify(r)),!0}catch(e){return!1}}static getRepairHistory(){try{const t=localStorage.getItem(this.REPAIR_HISTORY_KEY);return t?JSON.parse(t):[]}catch(t){return[]}}static getRepairStatistics(){const t=this.getRepairHistory();return{totalRepairs:t.length,totalCars:new Set(t.map(t=>t.car_vin)).size,totalMechanics:new Set(t.map(t=>t.technician_name)).size,totalParts:t.reduce((t,e)=>t+e.parts_used.reduce((t,e)=>t+e.quantity,0),0)}}static searchRepairHistory(t){const e=this.getRepairHistory(),r=t.toLowerCase();return e.filter(t=>t.car_vin.toLowerCase().includes(r)||t.car_model.toLowerCase().includes(r)||t.client_name.toLowerCase().includes(r)||t.technician_name.toLowerCase().includes(r))}}n(l,"REPAIR_HISTORY_KEY","enhancedRepairHistory");export{l as E,c as W};
